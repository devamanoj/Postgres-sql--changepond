Explain the primary key and foreign key concepts in PostgreSQL.

A primary key is a unique identifier for a record in a table. Each table can have only one primary key, 
which can consist of one or multiple columns. The primary key ensures that each record within the table is unique 
and not null.
Example from student table:
CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,  -- This is the primary key
    student_name VARCHAR(100),
    age INTEGER,
    email VARCHAR(100),
    frontend_mark INTEGER,
    backend_mark INTEGER,
    status VARCHAR(50)
);
In the students table, student_id is the primary key. It uniquely identifies each student in the table. The SERIAL 
keyword automatically generates a unique value for student_id for each new record.

A foreign key is a column or a set of columns in one table that references the primary key columns of another table.
Foreign keys are used to enforce referential integrity between tables, ensuring that the value in the foreign key 
column corresponds to a valid primary key value in the referenced table.
Example from enrollment table:
CREATE TABLE enrollment (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES students(student_id),  -- This is the foreign key referencing students
    course_id INTEGER REFERENCES courses(course_id)  -- This is the foreign key referencing courses
);
In the enrollment table, student_id is a foreign key that references the student_id primary key in the students table.
Similarly, course_id is a foreign key that references the course_id primary key in the courses table. This means that 
each student_id and course_id in the enrollment table must correspond to an existing student_id in the students table
and course_id in the courses table, respectively.

What is the difference between the VARCHAR and CHAR data types?
VARCHAR (Variable Character)
Variable Length: VARCHAR is used for variable-length strings. It can store strings of any length up to a specified limit.

Storage Efficiency: Only the actual length of the string is stored, along with a small overhead for storing the length. 
This makes VARCHAR more storage-efficient, especially for strings of varying lengths.

Usage: Suitable for columns where the string length can vary significantly, such as names, addresses, or descriptions.

Example:
CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    student_name VARCHAR(100),  -- Variable length
    age INTEGER,
    email VARCHAR(100),         -- Variable length
    frontend_mark INTEGER,
    backend_mark INTEGER,
    status VARCHAR(50)          -- Variable length
);

CHAR (Character)
Fixed Length: CHAR is used for fixed-length strings. The length is specified, and all values stored in the column will 
have that exact length.

Padding with Spaces: If the string is shorter than the specified length, CHAR pads the string with spaces to reach the
 fixed length.
 
Usage: Suitable for columns where the string length is consistent, such as codes, identifiers, or abbreviations.

Example:
CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_code CHAR(10),       -- Fixed length, e.g., 'CSE101    '
    course_name VARCHAR(100),   -- Variable length
    credits INTEGER
);


What are the LIMIT and OFFSET clauses used for?

The LIMIT clause specifies the maximum number of rows to return from a query. It is used to restrict the
 result set to a certain number of rows.
 Example:
 SELECT student_name
FROM students
LIMIT 5;
This query will return the first 5 rows from the students table.
OFFSET Clause
The OFFSET clause specifies the number of rows to skip before starting to return rows from the query. It is 
often used in combination with the LIMIT clause for pagination.
SELECT student_name
FROM students
ORDER BY student_id
LIMIT 5 OFFSET 10;
This query will skip the first 10 rows and return the next 5 rows from the students table, ordered by student_id.

How can you perform data modification using UPDATE statements?

The UPDATE statement in SQL is used to modify existing records in a table. It allows you to change the values of
one or more columns in one or more rows.

CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    student_name VARCHAR(100),
    age INTEGER,
    email VARCHAR(100),
    frontend_mark INTEGER,
    backend_mark INTEGER,
    status VARCHAR(50)
);
INSERT INTO students (student_name, age, email, frontend_mark, backend_mark, status)
VALUES
    ('Devanathan', 24, 'Devanathan@hotmail.com', 55, 57, NULL),
    ('Ajith', 22, 'Ajith@hotmail.com', 34, 45, NULL),
    ('Rahul', 23, 'rahul@hotmail.com', 60, 59, NULL),
    ('Manoj', 22, 'Manoj@gmail.com', 40, 49, NULL),
    ('Vasanth', 24, 'Vasanth@gmail.com', 45, 34, NULL),
    ('Dhanesh', 22, 'dhanesh@gmail.com', 46, 42, NULL);
UPDATE students
SET status = 'Graduated'
WHERE student_id = 1;

What is the significance of the JOIN operation, and how does it work in PostgreSQL?

The JOIN operation is crucial in SQL for combining rows from two or more tables based on related columns between them. It allows you to retrieve related data stored in different tables, making it possible to query data in a relational manner. This is especially important in relational databases like PostgreSQL, where data is often normalized across multiple tables to reduce redundancy and improve data integrity.

Types of JOINs in PostgreSQL
PostgreSQL supports several types of JOIN operations:

INNER JOIN
LEFT JOIN (or LEFT OUTER JOIN)
RIGHT JOIN (or RIGHT OUTER JOIN)
FULL JOIN (or FULL OUTER JOIN)
CROSS JOIN

Explain the GROUP BY clause and its role in aggregation operations.

The GROUP BY clause in SQL is used to arrange identical data into groups. This clause is often used with aggregate
 functions (such as COUNT, SUM, AVG, MAX, and MIN) to perform aggregation operations on groups of rows rather than
individual rows.
CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    student_name VARCHAR(100),
    age INTEGER,
    email VARCHAR(100),
    frontend_mark INTEGER,
    backend_mark INTEGER,
    status VARCHAR(50)
);

CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100),
    credits INTEGER
);

CREATE TABLE enrollment (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES students(student_id),
    course_id INTEGER REFERENCES courses(course_id)
);

-- Sample Data
INSERT INTO students (student_name, age, email, frontend_mark, backend_mark, status)
VALUES
    ('Devanathan', 24, 'Devanathan@hotmail.com', 55, 57, NULL),
    ('Ajith', 22, 'Ajith@hotmail.com', 34, 45, NULL),
    ('Rahul', 23, 'rahul@hotmail.com', 60, 59, NULL),
    ('Manoj', 22, 'Manoj@gmail.com', 40, 49, NULL),
    ('Vasanth', 24, 'Vasanth@gmail.com', 45, 34, NULL),
    ('Dhanesh', 22, 'dhanesh@gmail.com', 46, 42, NULL);

INSERT INTO courses (course_name, credits)
VALUES
    ('Next.js', 3),
    ('React.js', 4),
    ('Databases', 3),
    ('Prisma', 3);

INSERT INTO enrollment (student_id, course_id)
VALUES
    (1, 1),
    (1, 2),
    (2, 1),
    (3, 2);
Example 1: Counting Students by Age
To count the number of students of each age:
SELECT age, COUNT(student_id) AS number_of_students
FROM students
GROUP BY age
ORDER BY age;
OUTPUT:
 age | number_of_students
-----|--------------------
  22 |                  3
  23 |                  1
  24 |                  2
Example 2: Average Marks by Student
To calculate the average of frontend_mark and backend_mark for each student:
SELECT student_name, AVG(frontend_mark) AS avg_frontend, AVG(backend_mark) AS avg_backend
FROM students
GROUP BY student_name;
output:
 student_name | avg_frontend | avg_backend
--------------|--------------|-------------
 Devanathan   |           55 |          57
 Ajith        |           34 |          45
 Rahul        |           60 |          59
 Manoj        |           40 |          49
 Vasanth      |           45 |          34
 Dhanesh      |           46 |          42
Example 3: Total Enrollments per Course
To count the number of students enrolled in each course:
SELECT courses.course_name, COUNT(enrollment.student_id) AS number_of_students
FROM courses
LEFT JOIN enrollment ON courses.course_id = enrollment.course_id
GROUP BY courses.course_name
ORDER BY courses.course_name;
OUTPUT:
 course_name | number_of_students
-------------|--------------------
 Databases   |                  0
 Next.js     |                  2
 Prisma      |                  0
 React.js    |                  2

How can you calculate aggregate functions like COUNT, SUM, and AVG in PostgreSQL?

PostgreSQL supports a variety of aggregate functions that allow you to perform calculations on a set of values and 
return a single result. The most commonly used aggregate functions are COUNT, SUM, and AVG.

COUNT Function
The COUNT function returns the number of rows that match a specified condition. It can be used to count all rows,
 count distinct values, or count non-null values in a column.
 
 CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    student_name VARCHAR(100),
    age INTEGER,
    email VARCHAR(100),
    frontend_mark INTEGER,
    backend_mark INTEGER,
    status VARCHAR(50)
);

CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100),
    credits INTEGER
);

CREATE TABLE enrollment (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES students(student_id),
    course_id INTEGER REFERENCES courses(course_id)
);
INSERT INTO students (student_name, age, email, frontend_mark, backend_mark, status)
VALUES
    ('Devanathan', 24, 'Devanathan@hotmail.com', 55, 57, NULL),
    ('Ajith', 22, 'Ajith@hotmail.com', 34, 45, NULL),
    ('Rahul', 23, 'rahul@hotmail.com', 60, 59, NULL),
    ('Manoj', 22, 'Manoj@gmail.com', 40, 49, NULL),
    ('Vasanth', 24, 'Vasanth@gmail.com', 45, 34, NULL),
    ('Dhanesh', 22, 'dhanesh@gmail.com', 46, 42, NULL);
COUNT:
SELECT COUNT(*) AS total_students
FROM students;

output:
 total_students
----------------
              6
SUM:
SELECT SUM(frontend_mark) AS total_frontend_marks
FROM students;

OUTPUT:
 total_frontend_marks
----------------------
                   280

AVG:
SELECT AVG(backend_mark) AS average_backend_marks
FROM students;

OUTPUT:
 average_backend_marks
------------------------
                 47.6667

AGGREGATE FUNCTIONS WITH GROUP BY:
SELECT age, COUNT(*) AS number_of_students, SUM(frontend_mark) AS total_frontend_marks, AVG(backend_mark) AS average_backend_marks
FROM students
GROUP BY age
ORDER BY age;
OUTPUT:
 age | number_of_students | total_frontend_marks | average_backend_marks
-----|---------------------|----------------------|-----------------------
  22 |                   3 |                   120 |                 45.3333
  23 |                   1 |                    60 |                 59.0000
  24 |                   2 |                   100 |                 45.5000


What is the purpose of an index in PostgreSQL, and how does it optimize query performance?

An index in PostgreSQL, as in other relational databases, is a database object that improves the speed of data
 retrieval operations on a table at the cost of additional storage space and maintenance overhead. Indexes are crucial
 for optimizing query performance, particularly for large datasets, as they allow the database engine to find rows 
 much faster than it could by scanning the entire table.
 
Explain the concept of a PostgreSQL view and how it differs from a table.

A view in PostgreSQL is a virtual table that is based on the result of a SQL query. It contains no data itself
but displays data stored in other tables. A view simplifies complex queries, encapsulates logic, and provides a 
level of abstraction over the base tables.
SYNTAX:
CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;



